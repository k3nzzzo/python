import random

class CityGrid:
    def __init__(self, rows, columns, obstruction_rate=0.3):
        self.rows = rows
        self.columns = columns
        self.obstruction_rate = obstruction_rate
        self.grid = self._generate_grid()

    def _generate_grid(self):
        grid = []
        for i in range(self.rows):
            row = []
            for j in range(self.columns):
                is_obstructed = random.random() < self.obstruction_rate
                row.append(is_obstructed)
            grid.append(row)
        return grid

    def place_min_towers(self, tower_range):
        uncovered_blocks = self._count_uncovered_blocks()

        while uncovered_blocks > 0:
            best_tower_location = self._find_best_tower_location(tower_range)
            if best_tower_location is None:
                break  
            self.place_tower(*best_tower_location, tower_range)
            uncovered_blocks = self._count_uncovered_blocks()

    def _find_best_tower_location(self, tower_range):
        max_uncovered = 0
        best_location = None

        for i in range(self.rows):
            for j in range(self.columns):
                if not self.grid[i][j]:  
                    uncovered_count = self._count_uncovered_blocks_after_placing_tower(i, j, tower_range)
                    if uncovered_count > max_uncovered:
                        max_uncovered = uncovered_count
                        best_location = (i, j)

        return best_location

    def _count_uncovered_blocks_after_placing_tower(self, row, columns, tower_range):
        temp_grid = [row[:] for row in self.grid]

        uncovered_count = 0
        for i in range(max(0, row - tower_range), min(self.rows, row + tower_range + 1)):
            for j in range(max(0, columns - tower_range), min(self.columns, columns + tower_range + 1)):
                if not temp_grid[i][j]:
                    temp_grid[i][j] = True
                    uncovered_count += 1

        return uncovered_count

    def _count_uncovered_blocks(self):
        return sum(row.count(False) for row in self.grid)

    def display(self):
        for row in self.grid:
            print(" ".join(["X" if block else "O" for block in row]))

city = CityGrid(10, 10, obstruction_rate=0.2) 
city.display()  

tower_range = 2
city.place_min_towers(tower_range)  
city.display() 
